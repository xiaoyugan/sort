#pragma once
#include"Help.h"


//1. 算法从入门到“放弃”（3） - 快速排序2.算法从入门到“放弃”（4） - 插入排序3.算法从入门到“放弃”（5） - 计数排序4.算法从入门到“放弃”（6） - 冒泡排序5.算法从入门到“放弃”（7） - 选择排序6.算法从入门到“放弃”（8） - 归并排序7.算法从入门到“放弃”（9） - 希尔排序本文提炼



//在堆中存储数据时必须遵守这样一条规则 ：子结点必定大于父结点
//因此，最小值被存储在顶端的根结点中
//往堆中添加数据时，为了遵守这条规则，一般会把新数据放在最下面一行靠左的位置
//当最下面一行里没有多余空间时，就再往下另起一行，把数据加在这一行的最左端


//如果需要频繁地从管理的数据中取出最小值，那么使用堆来操作会非常方便。
//比如狄克斯特拉算法，每一步都需要从候补顶点中选择距离起点最近的那个
//顶点。此时，在顶点的选择上就可以用到堆


//二叉查找树有两个性质。第一个是每个结点的值均大于其左子树上任意一个结点的值
//第二个是每个结点的值均小于其右子树上任意一个结点的值
//叉查找树的最小结点要从顶端开始，往其左下的末端寻找

void BuildHeap(vector<int>& a)
{

}

void HeapSort(vector<int>&a)
{

}